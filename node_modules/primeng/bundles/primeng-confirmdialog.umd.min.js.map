{"version":3,"sources":["../../src/app/components/confirmdialog/confirmdialog.ts"],"names":["showAnimation","animation","style","transform","opacity","animate","hideAnimation","ConfirmDialog","el","renderer","confirmationService","zone","cd","config","_this","this","acceptIcon","acceptVisible","rejectIcon","rejectVisible","closeOnEscape","blockScroll","closable","autoZIndex","baseZIndex","transitionOptions","focusTrap","defaultFocus","onHide","EventEmitter","_position","transformOptions","subscription","requireConfirmation$","subscribe","confirmation","key","confirmationOptions","message","icon","header","acceptLabel","rejectLabel","acceptButtonStyleClass","rejectButtonStyleClass","dismissableMask","accept","acceptEvent","reject","rejectEvent","visible","hide","Object","defineProperty","prototype","_visible","value","maskVisible","markForCheck","ngAfterContentInit","templates","forEach","item","getType","footerTemplate","template","option","name","source","hasOwnProperty","onAnimationStart","event","toState","container","element","wrapper","parentElement","contentContainer","DomHandler","findSingle","getElementToFocus","focus","appendContainer","moveOnTop","bindGlobalListeners","enableModality","onAnimationEnd","onOverlayHide","appendTo","document","body","appendChild","restoreAppend","nativeElement","addClass","maskClickListener","listen","isSameNode","target","close","disableModality","removeClass","unbindMaskClickListener","detectChanges","emit","ConfirmEventType","CANCEL","preventDefault","type","zIndex","String","zindex","getMaskClass","maskClass","p-dialog-mask p-component-overlay","p-dialog-mask-scrollblocker","getPositionClass","toString","pos","find","position","documentEscapeListener","documentTarget","ownerDocument","which","parseInt","focusableElements","getFocusableElements","length","activeElement","focusedIndex","indexOf","shiftKey","unbindGlobalListeners","ngOnDestroy","unsubscribe","ACCEPT","REJECT","getTranslation","TranslationKeys","Component","args","selector","animations","trigger","transition","useAnimation","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ElementRef","Renderer2","ConfirmationService","NgZone","ChangeDetectorRef","PrimeNGConfig","Input","Output","ContentChild","Footer","ViewChild","ContentChildren","PrimeTemplate","NgModule","imports","CommonModule","ButtonModule","exports","SharedModule","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,ElementRef,OnDestroy,Input,EventEmitter,Renderer2,ContentChild,NgZone,ViewChild,ChangeDetectorRef,ChangeDetectionStrategy, ViewEncapsulation, ContentChildren, QueryList, TemplateRef, AfterContentInit, Output} from '@angular/core';\nimport {trigger,style,transition,animate,AnimationEvent, useAnimation, animation} from '@angular/animations';\nimport {CommonModule} from '@angular/common';\nimport {DomHandler} from 'primeng/dom';\nimport {Footer,SharedModule, PrimeTemplate, PrimeNGConfig, TranslationKeys, ConfirmEventType} from 'primeng/api';\nimport {ButtonModule} from 'primeng/button';\nimport {Confirmation} from 'primeng/api';\nimport {ConfirmationService} from 'primeng/api';\nimport {Subscription} from 'rxjs';\n\nconst showAnimation = animation([\n    style({ transform: '{{transform}}', opacity: 0 }),\n    animate('{{transition}}', style({ transform: 'none', opacity: 1 }))\n]);\n\nconst hideAnimation = animation([\n    animate('{{transition}}', style({ transform: '{{transform}}', opacity: 0 }))\n]);\n\n@Component({\n    selector: 'p-confirmDialog',\n    template: `\n        <div [class]=\"maskStyleClass\" [ngClass]=\"getMaskClass()\" *ngIf=\"maskVisible\">\n            <div [ngClass]=\"{'p-dialog p-confirm-dialog p-component':true,'p-dialog-rtl':rtl}\" [ngStyle]=\"style\" [class]=\"styleClass\" (mousedown)=\"moveOnTop()\"\n                [@animation]=\"{value: 'visible', params: {transform: transformOptions, transition: transitionOptions}}\" (@animation.start)=\"onAnimationStart($event)\" (@animation.done)=\"onAnimationEnd($event)\" *ngIf=\"visible\">\n                <div class=\"p-dialog-header\">\n                    <span class=\"p-dialog-title\" *ngIf=\"option('header')\">{{option('header')}}</span>\n                    <div class=\"p-dialog-header-icons\">\n                        <button *ngIf=\"closable\" type=\"button\" [ngClass]=\"{'p-dialog-header-icon p-dialog-header-close p-link':true}\" (click)=\"close($event)\" (keydown.enter)=\"close($event)\">\n                            <span class=\"pi pi-times\"></span>\n                        </button>\n                    </div>\n                </div>\n                <div #content class=\"p-dialog-content\">\n                    <i [ngClass]=\"'p-confirm-dialog-icon'\" [class]=\"option('icon')\" *ngIf=\"option('icon')\"></i>\n                    <span class=\"p-confirm-dialog-message\" [innerHTML]=\"option('message')\"></span>\n                </div>\n                <div class=\"p-dialog-footer\" *ngIf=\"footer || footerTemplate\">\n                    <ng-content select=\"p-footer\"></ng-content>\n                    <ng-container *ngTemplateOutlet=\"footerTemplate\"></ng-container>\n                </div>\n                <div class=\"p-dialog-footer\" *ngIf=\"!footer\">\n                    <button type=\"button\" pButton [icon]=\"option('rejectIcon')\" [label]=\"rejectButtonLabel\" (click)=\"reject()\" [ngClass]=\"'p-confirm-dialog-reject'\" [class]=\"option('rejectButtonStyleClass')\" *ngIf=\"option('rejectVisible')\" [attr.aria-label]=\"rejectAriaLabel\"></button>\n                    <button type=\"button\" pButton [icon]=\"option('acceptIcon')\" [label]=\"acceptButtonLabel\" (click)=\"accept()\" [ngClass]=\"'p-confirm-dialog-accept'\" [class]=\"option('acceptButtonStyleClass')\" *ngIf=\"option('acceptVisible')\" [attr.aria-label]=\"acceptAriaLabel\"></button>\n                </div>\n            </div>\n        </div>\n    `,\n    animations: [\n        trigger('animation', [\n            transition('void => visible', [\n                useAnimation(showAnimation)\n            ]),\n            transition('visible => void', [\n                useAnimation(hideAnimation)\n            ])\n        ])\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['../dialog/dialog.css']\n})\nexport class ConfirmDialog implements AfterContentInit,OnDestroy {\n\n    @Input() header: string;\n\n    @Input() icon: string;\n\n    @Input() message: string;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() maskStyleClass: string;\n\n    @Input() acceptIcon: string = 'pi pi-check';\n\n    @Input() acceptLabel: string;\n\n    @Input() acceptAriaLabel: string;\n\n    @Input() acceptVisible: boolean = true;\n\n    @Input() rejectIcon: string = 'pi pi-times';\n\n    @Input() rejectLabel: string;\n\n    @Input() rejectAriaLabel: string;\n\n    @Input() rejectVisible: boolean = true;\n\n    @Input() acceptButtonStyleClass: string;\n\n    @Input() rejectButtonStyleClass: string;\n\n    @Input() closeOnEscape: boolean = true;\n\n    @Input() dismissableMask: boolean;\n\n    @Input() blockScroll: boolean = true;\n\n    @Input() rtl: boolean;\n\n    @Input() closable: boolean = true;\n\n    @Input() appendTo: any;\n\n    @Input() key: string;\n\n    @Input() autoZIndex: boolean = true;\n\n    @Input() baseZIndex: number = 0;\n\n    @Input() transitionOptions: string = '150ms cubic-bezier(0, 0, 0.2, 1)';\n\n    @Input() focusTrap: boolean = true;\n\n    @Input() defaultFocus: string = 'accept';\n\n    @Input() get visible(): any {\n        return this._visible;\n    }\n    set visible(value:any) {\n        this._visible = value;\n\n        if (this._visible && !this.maskVisible) {\n            this.maskVisible = true;\n        }\n\n        this.cd.markForCheck();\n    }\n\n    @Input() get position(): string {\n        return this._position;\n    };\n\n    set position(value: string) {\n        this._position = value;\n\n        switch (value) {\n            case 'top-left':\n            case 'bottom-left':\n            case 'left':\n                this.transformOptions = \"translate3d(-100%, 0px, 0px)\";\n            break;\n            case 'top-right':\n            case 'bottom-right':\n            case 'right':\n                this.transformOptions = \"translate3d(100%, 0px, 0px)\";\n            break;\n            case 'bottom':\n                this.transformOptions = \"translate3d(0px, 100%, 0px)\";\n            break;\n            case 'top':\n                this.transformOptions = \"translate3d(0px, -100%, 0px)\";\n            break;\n            default:\n                this.transformOptions = \"scale(0.7)\";\n            break;\n        }\n    }\n\n    @Output() onHide: EventEmitter<any> = new EventEmitter();\n\n    @ContentChild(Footer) footer;\n\n    @ViewChild('content') contentViewChild: ElementRef;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'footerTemplate':\n                    this.footerTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    footerTemplate: TemplateRef<any>;\n\n    confirmation: Confirmation;\n\n    _visible: boolean;\n\n    maskVisible: boolean;\n\n    documentEscapeListener: any;\n\n    container: HTMLDivElement;\n\n    wrapper: HTMLElement;\n\n    contentContainer: HTMLDivElement;\n\n    subscription: Subscription;\n\n    maskClickListener: Function;\n\n    preWidth: number;\n\n    _position: string = \"center\";\n\n    transformOptions: any = \"scale(0.7)\";\n\n    confirmationOptions: Confirmation;\n\n    constructor(public el: ElementRef, public renderer: Renderer2, private confirmationService: ConfirmationService, public zone: NgZone, private cd: ChangeDetectorRef, public config: PrimeNGConfig) {\n        this.subscription = this.confirmationService.requireConfirmation$.subscribe(confirmation => {\n            if (!confirmation) {\n                this.hide();\n                return;\n            }\n\n            if (confirmation.key === this.key) {\n                this.confirmation = confirmation;\n                this.confirmationOptions = {\n                    message: this.confirmation.message||this.message,\n                    icon: this.confirmation.icon||this.icon,\n                    header: this.confirmation.header||this.header,\n                    rejectVisible: this.confirmation.rejectVisible == null ? this.rejectVisible : this.confirmation.rejectVisible,\n                    acceptVisible: this.confirmation.acceptVisible == null ? this.acceptVisible : this.confirmation.acceptVisible,\n                    acceptLabel: this.confirmation.acceptLabel||this.acceptLabel,\n                    rejectLabel: this.confirmation.rejectLabel||this.rejectLabel,\n                    acceptIcon: this.confirmation.acceptIcon || this.acceptIcon,\n                    rejectIcon: this.confirmation.rejectIcon || this.rejectIcon,\n                    acceptButtonStyleClass: this.confirmation.acceptButtonStyleClass || this.acceptButtonStyleClass,\n                    rejectButtonStyleClass: this.confirmation.rejectButtonStyleClass || this.rejectButtonStyleClass,\n                    defaultFocus: this.confirmation.defaultFocus || this.defaultFocus,\n                    blockScroll: (this.confirmation.blockScroll === false || this.confirmation.blockScroll === true) ? this.confirmation.blockScroll : this.blockScroll,\n                    closeOnEscape: (this.confirmation.closeOnEscape === false || this.confirmation.closeOnEscape === true) ? this.confirmation.closeOnEscape : this.closeOnEscape,\n                    dismissableMask: (this.confirmation.dismissableMask === false || this.confirmation.dismissableMask === true) ? this.confirmation.dismissableMask : this.dismissableMask\n                };\n\n                if (this.confirmation.accept) {\n                    this.confirmation.acceptEvent = new EventEmitter();\n                    this.confirmation.acceptEvent.subscribe(this.confirmation.accept);\n                }\n\n                if (this.confirmation.reject) {\n                    this.confirmation.rejectEvent = new EventEmitter();\n                    this.confirmation.rejectEvent.subscribe(this.confirmation.reject);\n                }\n\n                this.visible = true;\n            }\n        });\n    }\n\n    option(name: string) {\n        const source = this.confirmationOptions || this;\n        if (source.hasOwnProperty(name)) {\n            return source[name];\n        }\n        return undefined;\n    }\n\n    onAnimationStart(event: AnimationEvent) {\n        switch(event.toState) {\n            case 'visible':\n                this.container = event.element;\n                this.wrapper = this.container.parentElement;\n                this.contentContainer = DomHandler.findSingle(this.container, '.p-dialog-content');\n\n                const element = this.getElementToFocus();\n                if (element) {\n                    element.focus();\n                }\n\n                this.appendContainer();\n                this.moveOnTop();\n                this.bindGlobalListeners();\n                this.enableModality();\n            break;\n        }\n    }\n\n    onAnimationEnd(event: AnimationEvent) {\n        switch(event.toState) {\n            case 'void':\n                this.onOverlayHide();\n            break;\n        }\n    }\n\n    getElementToFocus() {\n        switch(this.option('defaultFocus')) {\n            case 'accept':\n                return DomHandler.findSingle(this.container, '.p-confirm-dialog-accept');\n\n            case 'reject':\n                return DomHandler.findSingle(this.container, '.p-confirm-dialog-reject');\n\n            case 'close':\n                return DomHandler.findSingle(this.container, '.p-dialog-header-close');\n\n            case 'none':\n                return null;\n\n            //backward compatibility\n            default:\n                return DomHandler.findSingle(this.container, '.p-confirm-dialog-accept');\n        }\n    }\n\n    appendContainer() {\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.wrapper);\n            else\n                DomHandler.appendChild(this.wrapper, this.appendTo);\n        }\n    }\n\n    restoreAppend() {\n        if (this.wrapper && this.appendTo) {\n            this.el.nativeElement.appendChild(this.wrapper);\n        }\n    }\n\n    enableModality() {\n        if (this.option('blockScroll')) {\n            DomHandler.addClass(document.body, 'p-overflow-hidden');\n        }\n\n        if (this.option('dismissableMask')) {\n            this.maskClickListener = this.renderer.listen(this.wrapper, 'mousedown', (event: any) => {\n                if (this.wrapper && this.wrapper.isSameNode(event.target)) {\n                    this.close(event);\n                }\n            });\n        }\n    }\n\n    disableModality() {\n        this.maskVisible = false;\n\n        if (this.option('blockScroll')) {\n            DomHandler.removeClass(document.body, 'p-overflow-hidden');\n        }\n\n        if (this.dismissableMask) {\n            this.unbindMaskClickListener();\n        }\n\n        if (this.container && !this.cd['destroyed']) {\n            this.cd.detectChanges();\n        }\n    }\n\n    close(event: Event) {\n        if (this.confirmation.rejectEvent) {\n            this.confirmation.rejectEvent.emit(ConfirmEventType.CANCEL);\n        }\n\n        this.hide(ConfirmEventType.CANCEL);\n        event.preventDefault();\n    }\n\n    hide(type?) {\n        this.onHide.emit(type);\n        this.visible = false;\n        this.confirmation = null;\n        this.confirmationOptions = null;\n    }\n\n    moveOnTop() {\n        if (this.autoZIndex) {\n            this.container.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n            this.wrapper.style.zIndex = String(this.baseZIndex + (DomHandler.zindex - 1));\n        }\n    }\n\n    getMaskClass() {\n        let maskClass = {'p-dialog-mask p-component-overlay': true, 'p-dialog-mask-scrollblocker': this.blockScroll};\n        maskClass[this.getPositionClass().toString()] = true;\n        return maskClass;\n    }\n\n    getPositionClass() {\n        const positions = ['left', 'right', 'top', 'top-left', 'top-right', 'bottom', 'bottom-left', 'bottom-right'];\n        const pos = positions.find(item => item === this.position);\n\n        return pos ? `p-dialog-${pos}` : '';\n    }\n\n    bindGlobalListeners() {\n        if ((this.option('closeOnEscape') && this.closable) || this.focusTrap && !this.documentEscapeListener) {\n            const documentTarget: any = this.el ? this.el.nativeElement.ownerDocument : 'document';\n\n            this.documentEscapeListener = this.renderer.listen(documentTarget, 'keydown', (event) => {\n                if (event.which == 27 && (this.option('closeOnEscape') && this.closable)) {\n                    if (parseInt(this.container.style.zIndex) === (DomHandler.zindex + this.baseZIndex) && this.visible) {\n                        this.close(event);\n                    }\n                }\n\n                if (event.which === 9 && this.focusTrap) {\n                    event.preventDefault();\n\n                    let focusableElements = DomHandler.getFocusableElements(this.container);\n\n                    if (focusableElements && focusableElements.length > 0) {\n                        if (!focusableElements[0].ownerDocument.activeElement) {\n                            focusableElements[0].focus();\n                        }\n                        else {\n                            let focusedIndex = focusableElements.indexOf(focusableElements[0].ownerDocument.activeElement);\n\n                            if (event.shiftKey) {\n                                if (focusedIndex == -1 || focusedIndex === 0)\n                                    focusableElements[focusableElements.length - 1].focus();\n                                else\n                                    focusableElements[focusedIndex - 1].focus();\n                            }\n                            else {\n                                if (focusedIndex == -1 || focusedIndex === (focusableElements.length - 1))\n                                    focusableElements[0].focus();\n                                else\n                                    focusableElements[focusedIndex + 1].focus();\n                            }\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    unbindGlobalListeners() {\n        if (this.documentEscapeListener) {\n            this.documentEscapeListener();\n            this.documentEscapeListener = null;\n        }\n    }\n\n    unbindMaskClickListener() {\n        if (this.maskClickListener) {\n            this.maskClickListener();\n            this.maskClickListener = null;\n        }\n    }\n\n    onOverlayHide() {\n        this.disableModality();\n        this.unbindGlobalListeners();\n        this.container = null;\n    }\n\n    ngOnDestroy() {\n        this.restoreAppend();\n        this.onOverlayHide();\n        this.subscription.unsubscribe();\n    }\n\n    accept() {\n        if (this.confirmation && this.confirmation.acceptEvent) {\n            this.confirmation.acceptEvent.emit();\n        }\n\n        this.hide(ConfirmEventType.ACCEPT);\n    }\n\n    reject() {\n        if (this.confirmation && this.confirmation.rejectEvent) {\n            this.confirmation.rejectEvent.emit(ConfirmEventType.REJECT);\n        }\n\n        this.hide(ConfirmEventType.REJECT);\n    }\n\n    get acceptButtonLabel(): string {\n        return this.option('acceptLabel') || this.config.getTranslation(TranslationKeys.ACCEPT);\n    }\n\n    get rejectButtonLabel(): string {\n        return this.option('rejectLabel') || this.config.getTranslation(TranslationKeys.REJECT);\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,ButtonModule],\n    exports: [ConfirmDialog,ButtonModule,SharedModule],\n    declarations: [ConfirmDialog]\n})\nexport class ConfirmDialogModule { }\n"]}